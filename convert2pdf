#!/usr/bin/env bash

VERSION="0.1.0"

# Function to print usage instructions
print_usage() {
    echo "convert2pdf - Convert between Office formats and PDF"
    echo ""
    echo "Usage: convert2pdf <input_file> [output_file]"
    echo "       convert2pdf --batch <input_pattern> [output_directory]"
    echo ""
    echo "If output_file is not specified, the converted file will be saved in the same"
    echo "directory as the input file with the same name but different extension."
    echo ""
    echo "Examples:"
    echo "  convert2pdf document.docx                 # Converts DOCX to PDF"
    echo "  convert2pdf presentation.pptx output.pdf  # Converts PPTX to PDF with specified name"
    echo "  convert2pdf document.pdf                  # Prompts for DOCX or PPTX output format"
    echo "  convert2pdf spreadsheet.xlsx              # Converts XLSX to PDF"
    echo "  convert2pdf --batch \"*.docx\"             # Converts all DOCX files in current directory to PDF"
    echo "  convert2pdf --batch \"reports/*.pptx\" pdfs/ # Converts PPTX files to PDFs in 'pdfs' directory"
    echo ""
    echo "Options:"
    echo "  -h, --help     Show this help message"
    echo "  -v, --version  Show version information"
    echo "  --setup        Install required dependencies"
    echo "  --batch        Process multiple files matching the input pattern"
    echo ""
    echo "Supported input formats:"
    echo "  To PDF:   .doc, .docx, .ppt, .pptx, .xls, .xlsx, .odt, .odp, .ods"
    echo "  From PDF: Convert to .docx or .pptx"
}

# Display version information
show_version() {
    echo "convert2pdf version $VERSION"
}

# Check if LibreOffice is installed
check_libreoffice() {
    # Check for MacOS LibreOffice installation
    if [[ "$OSTYPE" == "darwin"* ]]; then
        if [ -d "/Applications/LibreOffice.app" ]; then
            LIBREOFFICE_PATH="/Applications/LibreOffice.app/Contents/MacOS/soffice"
            return 0
        elif [ -d "$HOME/Applications/LibreOffice.app" ]; then
            LIBREOFFICE_PATH="$HOME/Applications/LibreOffice.app/Contents/MacOS/soffice"
            return 0
        fi
    else
        # For Linux and other systems
        if command -v libreoffice &> /dev/null; then
            LIBREOFFICE_PATH="libreoffice"
            return 0
        elif command -v soffice &> /dev/null; then
            LIBREOFFICE_PATH="soffice"
            return 0
        fi
    fi

    echo "Error: LibreOffice is not installed"
    echo "Please install LibreOffice first:"
    echo "  For MacOS: brew install --cask libreoffice"
    echo "  For Ubuntu/Debian: sudo apt-get install libreoffice"
    echo "  For CentOS/RHEL: sudo yum install libreoffice"
    exit 1
}

# Install required dependencies
setup_dependencies() {
    echo "Setting up dependencies for convert2pdf..."

    # Check for Python
    if ! command -v python3 &> /dev/null; then
        echo "Python 3 not found. Please install it with: brew install python"
        exit 1
    fi

    # Install pdf2docx
    echo "Installing pdf2docx..."
    pip3 install pdf2docx

    # For PDF to PPTX conversion, we'll first try to install the required tools
    echo "Installing pypdf2..."
    pip3 install pypdf2

    echo "Installing python-pptx..."
    pip3 install python-pptx

    echo "Setup complete. You may now use convert2pdf."
    exit 0
}

# Check if Python dependencies are installed
check_python_dependencies() {
    # Check for Python
    if ! command -v python3 &> /dev/null; then
        echo "Python 3 not found. Please install it with: brew install python"
        exit 1
    fi

    # Check for pdf2docx module
    python3 -c "import pdf2docx" &> /dev/null || {
        echo "Required Python module pdf2docx not found."
        echo "Run 'convert2pdf --setup' to install dependencies or manually run: pip3 install pdf2docx"
        exit 1
    }

    # Check for PDF to PPTX dependencies
    python3 -c "import PyPDF2" &> /dev/null || {
        echo "Required Python module PyPDF2 not found."
        echo "Run 'convert2pdf --setup' to install dependencies or manually run: pip3 install pypdf2"
        exit 1
    }

    python3 -c "import pptx" &> /dev/null || {
        echo "Required Python module python-pptx not found."
        echo "Run 'convert2pdf --setup' to install dependencies or manually run: pip3 install python-pptx"
        exit 1
    }
}

# Function to get absolute path
get_absolute_path() {
    local path="$1"
    # If path starts with ~, expand it
    if [[ "$path" == "~"* ]]; then
        path="${path/\~/$HOME}"
    fi
    # Get the absolute path of the directory
    local dir=$(cd "$(dirname "$path")" 2>/dev/null && pwd)
    if [ -z "$dir" ]; then
        # If directory doesn't exist, create it
        mkdir -p "$(dirname "$path")"
        dir=$(cd "$(dirname "$path")" && pwd)
    fi
    echo "$dir/$(basename "$path")"
}

# Convert Office documents to PDF
convert_to_pdf() {
    local input_file="$1"
    local output_file="$2"
    local input_dir=$(dirname "$input_file")
    local input_basename=$(basename "$input_file")
    local filename_no_ext="${input_basename%.*}"

    # If no output file is specified, use input filename with .pdf extension
    if [ -z "$output_file" ]; then
        output_file="$input_dir/$filename_no_ext.pdf"
    fi

    # Get absolute paths
    input_file=$(get_absolute_path "$input_file")
    output_file=$(get_absolute_path "$output_file")

    # Create output directory if it doesn't exist
    mkdir -p "$(dirname "$output_file")"

    # Check if input file exists
    if [ ! -f "$input_file" ]; then
        echo "Error: Input file '$input_file' does not exist"
        return 1
    fi

    # Get file extension
    local extension="${input_file##*.}"
    extension=$(echo "$extension" | tr '[:upper:]' '[:lower:]')

    # Check if file type is supported
    case "$extension" in
        doc|docx|ppt|pptx|xls|xlsx|odt|odp|ods)
            echo "Converting $input_basename to PDF..."
            ;;
        *)
            echo "Error: Unsupported file format .$extension"
            echo "Supported formats for conversion to PDF: .doc, .docx, .ppt, .pptx, .xls, .xlsx, .odt, .odp, .ods"
            return 1
            ;;
    esac

    # Create temporary directory for conversion
    local temp_dir=$(mktemp -d)

    # Set conversion options based on file type
    local convert_options="--headless --convert-to pdf --outdir \"$temp_dir\""

    # Special handling for Excel files
    if [[ "$extension" == "xls" || "$extension" == "xlsx" || "$extension" == "ods" ]]; then
        convert_options="--headless --convert-to pdf:calc_pdf_Export --outdir \"$temp_dir\""
    fi

    # Convert file to PDF using LibreOffice
    eval "\"$LIBREOFFICE_PATH\" $convert_options \"$input_file\"" > /dev/null 2>&1

    # Check if conversion was successful
    if [ $? -eq 0 ] && [ -f "$temp_dir/$filename_no_ext.pdf" ]; then
        # Move the converted file to the desired location
        mv "$temp_dir/$filename_no_ext.pdf" "$output_file"
        echo "Successfully converted to: $output_file"
        rm -rf "$temp_dir"
        return 0
    else
        echo "Error: Conversion failed for $input_basename"
        rm -rf "$temp_dir"
        return 1
    fi
}

# Convert PDF to DOCX using pdf2docx
convert_pdf_to_docx() {
    local input_file="$1"
    local output_file="$2"
    local input_dir=$(dirname "$input_file")
    local input_basename=$(basename "$input_file")
    local filename_no_ext="${input_basename%.*}"

    # If output file is not specified, use the same name with .docx extension
    if [ -z "$output_file" ]; then
        output_file="$input_dir/$filename_no_ext.docx"
    fi

    # Get absolute paths
    input_file=$(get_absolute_path "$input_file")
    output_file=$(get_absolute_path "$output_file")

    # Create output directory if it doesn't exist
    mkdir -p "$(dirname "$output_file")"

    echo "Converting $input_basename to DOCX..."

    # Use pdf2docx for conversion
    python3 -c "from pdf2docx import Converter; cv = Converter('$input_file'); cv.convert('$output_file'); cv.close()" 2>/dev/null

    if [ -f "$output_file" ]; then
        echo "Successfully converted to: $output_file"
        return 0
    else
        echo "Error: Conversion failed for $input_basename"
        return 1
    fi
}

# Convert PDF to PPTX using Python
convert_pdf_to_pptx() {
    local input_file="$1"
    local output_file="$2"
    local input_dir=$(dirname "$input_file")
    local input_basename=$(basename "$input_file")
    local filename_no_ext="${input_basename%.*}"

    # If output file is not specified, use the same name with .pptx extension
    if [ -z "$output_file" ]; then
        output_file="$input_dir/$filename_no_ext.pptx"
    fi

    # Get absolute paths
    input_file=$(get_absolute_path "$input_file")
    output_file=$(get_absolute_path "$output_file")

    # Create output directory if it doesn't exist
    mkdir -p "$(dirname "$output_file")"

    echo "Converting $input_basename to PPTX..."

    # Custom Python script for PDF to PPTX conversion using PyPDF2 and python-pptx
    PYTHON_SCRIPT=$(cat << 'EOL'
import sys
import os
from PyPDF2 import PdfReader
from pptx import Presentation
from pptx.util import Inches

def convert_pdf_to_pptx(pdf_path, pptx_path):
    # Create presentation
    prs = Presentation()
    # Default slide layout (blank)
    blank_slide_layout = prs.slide_layouts[6]

    # Extract text from PDF
    pdf = PdfReader(pdf_path)

    # Process each page
    for page_num in range(len(pdf.pages)):
        # Extract text
        page = pdf.pages[page_num]
        text = page.extract_text()

        # Create slide
        slide = prs.slides.add_slide(blank_slide_layout)

        # Add text box with extracted text
        txBox = slide.shapes.add_textbox(Inches(0.5), Inches(0.5),
                                         Inches(9), Inches(5))
        tf = txBox.text_frame
        tf.text = f"Page {page_num + 1}\n\n{text}"

    # Save presentation
    prs.save(pptx_path)
    return True

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python script.py input.pdf output.pptx")
        sys.exit(1)

    success = convert_pdf_to_pptx(sys.argv[1], sys.argv[2])
    if not success:
        sys.exit(1)
EOL
)

    # Execute Python script
    python3 -c "$PYTHON_SCRIPT" "$input_file" "$output_file" 2>/dev/null

    if [ -f "$output_file" ]; then
        echo "Successfully converted to: $output_file"
        echo "Note: This is a basic conversion with text extraction only."
        echo "Images and formatting from the PDF may not be preserved."
        return 0
    else
        echo "Error: Conversion failed for $input_basename"
        echo "For better PDF to PPTX conversion, consider using commercial tools."
        return 1
    fi
}

# Alternative method: Convert PDF to PPTX using LibreOffice
# This is a fallback method that may not work perfectly
convert_pdf_to_pptx_lo() {
    local input_file="$1"
    local output_file="$2"
    local input_dir=$(dirname "$input_file")
    local input_basename=$(basename "$input_file")
    local filename_no_ext="${input_basename%.*}"

    # If output file is not specified, use the same name with .pptx extension
    if [ -z "$output_file" ]; then
        output_file="$input_dir/$filename_no_ext.pptx"
    fi

    # Get absolute paths
    input_file=$(get_absolute_path "$input_file")
    output_file=$(get_absolute_path "$output_file")

    # Create output directory if it doesn't exist
    mkdir -p "$(dirname "$output_file")"

    echo "Converting $input_basename to PPTX using LibreOffice..."

    # Create temporary directory for conversion
    local temp_dir=$(mktemp -d)

    # Try to convert PDF to PPTX using LibreOffice
    # Note: This may not work perfectly for all PDFs
    eval "\"$LIBREOFFICE_PATH\" --headless --convert-to pptx --outdir \"$temp_dir\" \"$input_file\"" > /dev/null 2>&1

    # Check if conversion was successful
    if [ $? -eq 0 ] && [ -f "$temp_dir/$filename_no_ext.pptx" ]; then
        # Move the converted file to the desired location
        mv "$temp_dir/$filename_no_ext.pptx" "$output_file"
        echo "Successfully converted to: $output_file"
        echo "Note: LibreOffice-based PDF to PPTX conversion may not preserve all formatting."
        rm -rf "$temp_dir"
        return 0
    else
        echo "Error: LibreOffice conversion failed for $input_basename"
        rm -rf "$temp_dir"

        # Try the Python-based conversion as fallback
        echo "Trying alternative conversion method..."
        convert_pdf_to_pptx "$input_file" "$output_file"
        return $?
    fi
}

# Process multiple files in batch mode
process_batch() {
    local input_pattern="$1"
    local output_dir="$2"
    local success_count=0
    local fail_count=0
    local file_count=0

    # Expand the glob pattern to get all matching files
    local files=()
    for file in $input_pattern; do
        # Skip if the pattern doesn't match any files
        if [[ ! -f "$file" ]]; then
            continue
        fi
        files+=("$file")
    done

    file_count=${#files[@]}

    if [ $file_count -eq 0 ]; then
        echo "No files found matching pattern: $input_pattern"
        return 1
    fi

    echo "Found $file_count files to process"

    # Process each file
    for file in "${files[@]}"; do
        # Get file extension
        local file_ext="${file##*.}"
        file_ext=$(echo "$file_ext" | tr '[:upper:]' '[:lower:]')

        # Determine output file path
        local output_file=""
        if [ -n "$output_dir" ]; then
            # Ensure output directory exists
            mkdir -p "$output_dir"

            # Use input filename with appropriate extension in output directory
            local basename=$(basename "$file")
            local filename_no_ext="${basename%.*}"

            case "$file_ext" in
                doc|docx|ppt|pptx|xls|xlsx|odt|odp|ods)
                    output_file="$output_dir/$filename_no_ext.pdf"
                    ;;
                pdf)
                    # For PDF we need to ask about the output format
                    echo "For PDF files in batch mode, please specify output format."
                    echo "1) DOCX (Word Document)"
                    echo "2) PPTX (PowerPoint Presentation)"
                    read -p "Enter your choice for all PDF files (1/2): " choice

                    case "$choice" in
                        1)
                            output_file="$output_dir/$filename_no_ext.docx"
                            ;;
                        2)
                            output_file="$output_dir/$filename_no_ext.pptx"
                            ;;
                        *)
                            echo "Invalid choice. Skipping PDF files."
                            continue
                            ;;
                    esac
                    ;;
                *)
                    echo "Skipping unsupported file: $file"
                    continue
                    ;;
            esac
        fi

        # Process file based on extension
        case "$file_ext" in
            doc|docx|ppt|pptx|xls|xlsx|odt|odp|ods)
                if convert_to_pdf "$file" "$output_file"; then
                    success_count=$((success_count + 1))
                else
                    fail_count=$((fail_count + 1))
                fi
                ;;
            pdf)
                # Check if we have a choice from above for PDF files
                if [ -n "$choice" ]; then
                    case "$choice" in
                        1)
                            if convert_pdf_to_docx "$file" "$output_file"; then
                                success_count=$((success_count + 1))
                            else
                                fail_count=$((fail_count + 1))
                            fi
                            ;;
                        2)
                            # First try the Python-based method
                            python3 -c "import PyPDF2; import pptx" &> /dev/null
                            if [ $? -eq 0 ]; then
                                if convert_pdf_to_pptx "$file" "$output_file"; then
                                    success_count=$((success_count + 1))
                                else
                                    fail_count=$((fail_count + 1))
                                fi
                            else
                                # Fall back to LibreOffice
                                if convert_pdf_to_pptx_lo "$file" "$output_file"; then
                                    success_count=$((success_count + 1))
                                else
                                    fail_count=$((fail_count + 1))
                                fi
                            fi
                            ;;
                    esac
                else
                    # If we're processing a single PDF, we'll ask for the format
                    echo "For batch processing PDF files, please specify output format."
                    echo "1) DOCX (Word Document)"
                    echo "2) PPTX (PowerPoint Presentation)"
                    read -p "Enter your choice (1/2): " choice

                    case "$choice" in
                        1)
                            if [ -n "$output_dir" ]; then
                                output_file="$output_dir/$(basename "${file%.*}").docx"
                            fi
                            if convert_pdf_to_docx "$file" "$output_file"; then
                                success_count=$((success_count + 1))
                            else
                                fail_count=$((fail_count + 1))
                            fi
                            ;;
                        2)
                            if [ -n "$output_dir" ]; then
                                output_file="$output_dir/$(basename "${file%.*}").pptx"
                            fi
                            # First try the Python-based method
                            python3 -c "import PyPDF2; import pptx" &> /dev/null
                            if [ $? -eq 0 ]; then
                                if convert_pdf_to_pptx "$file" "$output_file"; then
                                    success_count=$((success_count + 1))
                                else
                                    fail_count=$((fail_count + 1))
                                fi
                            else
                                # Fall back to LibreOffice
                                if convert_pdf_to_pptx_lo "$file" "$output_file"; then
                                    success_count=$((success_count + 1))
                                else
                                    fail_count=$((fail_count + 1))
                                fi
                            fi
                            ;;
                        *)
                            echo "Invalid choice. Skipping file: $file"
                            fail_count=$((fail_count + 1))
                            ;;
                    esac
                fi
                ;;
            *)
                echo "Skipping unsupported file: $file"
                fail_count=$((fail_count + 1))
                ;;
        esac
    done

    echo "Batch processing complete."
    echo "Successfully converted: $success_count files"
    if [ $fail_count -gt 0 ]; then
        echo "Failed to convert: $fail_count files"
    fi
}

# Main script execution

# Check for special flags
case "$1" in
    -h|--help)
        print_usage
        exit 0
        ;;
    -v|--version)
        show_version
        exit 0
        ;;
    --setup)
        setup_dependencies
        exit 0
        ;;
    --batch)
        if [ $# -lt 2 ]; then
            echo "Error: Missing input pattern for batch processing"
            print_usage
            exit 1
        fi
        # Check LibreOffice installation before processing
        check_libreoffice
        process_batch "$2" "$3"
        exit $?
        ;;
esac

# Check if input file is provided
if [ $# -eq 0 ]; then
    echo "Error: No input file specified"
    print_usage
    exit 1
fi

# Get input and output files
input_file="$1"
output_file="$2"

# Check if input file exists
if [ ! -f "$input_file" ]; then
    echo "Error: Input file '$input_file' not found"
    exit 1
fi

# Get file extension (lowercase)
file_ext="${input_file##*.}"
file_ext=$(echo "$file_ext" | tr '[:upper:]' '[:lower:]')

# Check LibreOffice installation
check_libreoffice

# Process based on input file extension
case "$file_ext" in
    doc|docx|ppt|pptx|xls|xlsx|odt|odp|ods)
        convert_to_pdf "$input_file" "$output_file"
        ;;
    pdf)
        # First, try to check dependencies without noise
        python3 -c "import pdf2docx" &> /dev/null
        has_pdf2docx=$?
        python3 -c "import PyPDF2" &> /dev/null
        has_pypdf2=$?
        python3 -c "import pptx" &> /dev/null
        has_pptx=$?

        # If dependencies aren't installed, notify the user
        if [ $has_pdf2docx -ne 0 ] || [ $has_pypdf2 -ne 0 ] || [ $has_pptx -ne 0 ]; then
            echo "Some required Python dependencies are missing."
            echo "Run 'convert2pdf --setup' to install them automatically."
        fi

        if [ -z "$output_file" ]; then
            # Ask user for the desired output format
            echo "Convert to which format?"
            echo "1) DOCX (Word Document)"
            echo "2) PPTX (PowerPoint Presentation)"
            read -p "Enter your choice (1/2): " choice

            case "$choice" in
                1)
                    if [ $has_pdf2docx -eq 0 ]; then
                        convert_pdf_to_docx "$input_file" ""
                    else
                        echo "PDF to DOCX conversion requires the pdf2docx Python module."
                        echo "Run 'convert2pdf --setup' to install it."
                        exit 1
                    fi
                    ;;
                2)
                    # First try the Python-based method if dependencies are available
                    if [ $has_pypdf2 -eq 0 ] && [ $has_pptx -eq 0 ]; then
                        convert_pdf_to_pptx "$input_file" ""
                    else
                        # Fall back to LibreOffice method
                        convert_pdf_to_pptx_lo "$input_file" ""
                    fi
                    ;;
                *)
                    echo "Invalid choice. Exiting."
                    exit 1
                    ;;
            esac
        else
            # Determine output format from specified output file
            output_ext="${output_file##*.}"
            output_ext=$(echo "$output_ext" | tr '[:upper:]' '[:lower:]')

            case "$output_ext" in
                docx)
                    if [ $has_pdf2docx -eq 0 ]; then
                        convert_pdf_to_docx "$input_file" "$output_file"
                    else
                        echo "PDF to DOCX conversion requires the pdf2docx Python module."
                        echo "Run 'convert2pdf --setup' to install it."
                        exit 1
                    fi
                    ;;
                pptx)
                    # First try the Python-based method if dependencies are available
                    if [ $has_pypdf2 -eq 0 ] && [ $has_pptx -eq 0 ]; then
                        convert_pdf_to_pptx "$input_file" "$output_file"
                    else
                        # Fall back to LibreOffice method
                        convert_pdf_to_pptx_lo "$input_file" "$output_file"
                    fi
                    ;;
                *)
                    echo "Error: Unsupported output format. Please use .docx or .pptx extension."
                    exit 1
                    ;;
            esac
        fi
        ;;
    *)
        echo "Error: Unsupported file format. Please use PDF, DOC, DOCX, PPT, PPTX, XLS, XLSX files."
        exit 1
        ;;
esac